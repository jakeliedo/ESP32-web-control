#!/usr/bin/env python3
"""
Network Auto-Detection and Configuration Script
T·ª± ƒë·ªông ph√°t hi·ªán IP v√† c·∫≠p nh·∫≠t config cho to√†n b·ªô h·ªá th·ªëng
"""

import socket
import json
import os
import subprocess
import platform

def get_local_ip():
    """L·∫•y IP address hi·ªán t·∫°i c·ªßa m√°y"""
    try:
        # K·∫øt n·ªëi t·ªõi m·ªôt ƒë·ªãa ch·ªâ remote ƒë·ªÉ l·∫•y IP local
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except Exception:
        return "127.0.0.1"

def scan_network_for_mqtt():
    """Scan network ƒë·ªÉ t√¨m MQTT broker"""
    local_ip = get_local_ip()
    base_ip = ".".join(local_ip.split(".")[:-1])
    
    print(f"üîç Scanning network {base_ip}.x for MQTT broker...")
    
    # Common MQTT broker IPs to check
    mqtt_candidates = [
        local_ip,  # Same machine
        f"{base_ip}.1",   # Router
        f"{base_ip}.10",  # Common server IP
        f"{base_ip}.100", # Common server IP
    ]
    
    for ip in mqtt_candidates:
        if test_mqtt_connection(ip):
            print(f"‚úÖ Found MQTT broker at {ip}")
            return ip
    
    print("‚ö†Ô∏è No MQTT broker found, using localhost")
    return "localhost"

def test_mqtt_connection(ip, port=1883):
    """Test MQTT connection"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((ip, port))
        sock.close()
        return result == 0
    except:
        return False

def update_pc_host_config(mqtt_ip, local_ip):
    """C·∫≠p nh·∫≠t PC_host/config.py"""
    config_path = "PC_host/config.py"
    
    if not os.path.exists(config_path):
        # T·∫°o config.py m·ªõi
        config_content = f'''# Configuration file for ESP32 WC Control System
# Auto-generated by detect_network.py

# Network Configuration
HOST = "0.0.0.0"           # Flask server host (0.0.0.0 = all interfaces)
PORT = 5000                # Flask server port

# MQTT Broker Settings
MQTT_BROKER = "{mqtt_ip}"   # MQTT broker IP address
MQTT_PORT = 1883
MQTT_USERNAME = None        # Set if authentication required
MQTT_PASSWORD = None

# Database
DATABASE_PATH = "wc_system.db"

# Security
SECRET_KEY = "your-secret-key-change-this-in-production"

# Debug
DEBUG = True

# System Info
LOCAL_IP = "{local_ip}"     # This machine's IP
'''
        with open(config_path, 'w') as f:
            f.write(config_content)
        print(f"‚úÖ Created {config_path}")
    else:
        print(f"‚ö†Ô∏è {config_path} already exists, please update manually:")
        print(f"   MQTT_BROKER = \"{mqtt_ip}\"")
        print(f"   LOCAL_IP = \"{local_ip}\"")

def update_network_config(mqtt_ip):
    """C·∫≠p nh·∫≠t config/network_config.json"""
    config_dir = "config"
    config_path = os.path.join(config_dir, "network_config.json")
    
    if not os.path.exists(config_dir):
        os.makedirs(config_dir)
    
    network_config = {
        "wifi": {
            "ssid": "YOUR_WIFI_SSID",
            "password": "YOUR_WIFI_PASSWORD"
        },
        "mqtt": {
            "broker": mqtt_ip,
            "port": 1883,
            "topics": {
                "commands": "wc/commands/{node_id}",
                "status": "wc/status/{node_id}"
            }
        }
    }
    
    with open(config_path, 'w') as f:
        json.dump(network_config, f, indent=2)
    
    print(f"‚úÖ Updated {config_path}")

def update_device_config():
    """C·∫≠p nh·∫≠t config/devices.json"""
    config_dir = "config"
    config_path = os.path.join(config_dir, "devices.json")
    
    if not os.path.exists(config_dir):
        os.makedirs(config_dir)
    
    if not os.path.exists(config_path):
        devices_config = {
            "nodes": [
                {
                    "node_id": "room1",
                    "name": "Room 1",
                    "type": "male",
                    "location": "Floor 1",
                    "description": "Male WC Room 1"
                },
                {
                    "node_id": "room2", 
                    "name": "Room 2",
                    "type": "male",
                    "location": "Floor 1",
                    "description": "Male WC Room 2"
                },
                {
                    "node_id": "room3",
                    "name": "Room 3", 
                    "type": "female",
                    "location": "Floor 1",
                    "description": "Female WC Room 1"
                }
            ]
        }
        
        with open(config_path, 'w') as f:
            json.dump(devices_config, f, indent=2)
        
        print(f"‚úÖ Created {config_path}")
    else:
        print(f"‚ÑπÔ∏è {config_path} already exists")

def install_dependencies():
    """Install Python dependencies"""
    print("üì¶ Installing Python dependencies...")
    
    requirements = [
        "flask",
        "flask-socketio", 
        "paho-mqtt"
    ]
    
    for package in requirements:
        try:
            subprocess.check_call(["pip", "install", package])
            print(f"‚úÖ Installed {package}")
        except subprocess.CalledProcessError:
            print(f"‚ùå Failed to install {package}")

def create_startup_scripts(local_ip):
    """T·∫°o startup scripts"""
    
    # Windows batch file
    bat_content = f'''@echo off
title ESP32 WC Control System
echo ==========================================
echo   ESP32 WC Control System
echo ==========================================
echo.
echo üåê Dashboard: http://localhost:5000/
echo üåê Simple UI: http://localhost:5000/simple
echo üåê Remote:    http://{local_ip}:5000/
echo.
echo Starting Flask server...
echo Press Ctrl+C to stop
echo ==========================================

cd PC_host
python app.py
'''
    
    with open("start_system.bat", 'w') as f:
        f.write(bat_content)
    
    # Linux shell script
    sh_content = f'''#!/bin/bash
clear
echo "=========================================="
echo "   ESP32 WC Control System"
echo "=========================================="
echo ""
echo "üåê Dashboard: http://localhost:5000/"
echo "üåê Simple UI: http://localhost:5000/simple"
echo "üåê Remote:    http://{local_ip}:5000/"
echo ""
echo "Starting Flask server..."
echo "Press Ctrl+C to stop"
echo "=========================================="

cd PC_host
python3 app.py
'''
    
    with open("start_system.sh", 'w') as f:
        f.write(sh_content)
    
    # Make executable on Linux/Mac
    if platform.system() != "Windows":
        os.chmod("start_system.sh", 0o755)
    
    print("‚úÖ Created startup scripts:")
    print("   - start_system.bat (Windows)")
    print("   - start_system.sh (Linux/Mac)")

def main():
    """Main function"""
    print("üöÄ ESP32 WC Control System - Network Auto-Configuration")
    print("=" * 60)
    
    # Detect network info
    local_ip = get_local_ip()
    print(f"üìç Local IP: {local_ip}")
    
    mqtt_ip = scan_network_for_mqtt()
    print(f"üì° MQTT Broker: {mqtt_ip}")
    
    # Update configurations
    print("\nüîß Updating configurations...")
    update_pc_host_config(mqtt_ip, local_ip)
    update_network_config(mqtt_ip)
    update_device_config()
    
    # Install dependencies
    install_deps = input("\nüì¶ Install Python dependencies? (y/n): ").lower().strip()
    if install_deps == 'y':
        install_dependencies()
    
    # Create startup scripts
    create_startup_scripts(local_ip)
    
    print("\n‚úÖ Configuration complete!")
    print("\nüöÄ Next steps:")
    print("1. Update WiFi credentials in config/network_config.json")
    print("2. Deploy ESP32 code: cd ESP32_nodes && python deploy.py")
    print("3. Start system: ./start_system.bat (Windows) or ./start_system.sh (Linux)")
    print(f"4. Open browser: http://{local_ip}:5000/")
    
    print(f"\nüåê System URLs:")
    print(f"   Local:  http://localhost:5000/")
    print(f"   Remote: http://{local_ip}:5000/")

if __name__ == "__main__":
    main()
